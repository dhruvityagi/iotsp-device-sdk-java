/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'dhrtyagi' at '5/18/17 2:29 PM' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
//plugin for code coverage
apply plugin: 'jacoco'

group = 'com.cisco.iotsp'
version = '0.4.0.1-SNAPSHOT'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven {
        url "http://engci-maven-master.cisco.com/artifactory/IoT_Software_Platform-snapshot"
    }
}

configurations {
	libraries
	applibs
}


// In this section you declare the dependencies for your production and test code
dependencies {
    compile files('../../libs/lib-jars/iot-edge-rule-engine-0.3.1.0-SNAPSHOT.jar')
    compile files('../../libs/lib-jars/iot-state-processing-dsl-0.8.4-SNAPSHOT.jar')
    compile files('../../libs/lib-jars/iot-mqtt-client-edge-1.0.0.1-SNAPSHOT.jar')
    compile files('../../libs/lib-jars/iotsp-batch-store-manager-0.3.1.0-SNAPSHOT.jar')
    compile files('../../libs/lib-jars/iotsp-device-sdk-common-0.3.7.1-SNAPSHOT.jar')

    compile 'org.slf4j:slf4j-api:1.7.13'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3.4'
    compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.1.1'   
    compile group: 'org.apache.avro', name: 'avro', version: '1.7.7'
    compile group: 'org.ini4j', name: 'ini4j', version: '0.5.1'   
    
    applibs 'org.slf4j:slf4j-jdk14:1.7.21'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.3'
	
 	    
    testCompile 'junit:junit:4.12'
    testCompile 'ch.qos.logback:logback-classic:1.1.7'
    testCompile 'ch.qos.logback:logback-core:1.1.7'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.powermock:powermock-mockito-release-full:1.6.1'
	
    // https://mvnrepository.com/artifact/org.apache.avro/avro
    configurations.compile.extendsFrom(configurations.libraries)
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/classes/main']
        }
    }

    logback {
        resources {
            srcDirs = ['src/main/resources']
        }
    }

    test {
        java {
            srcDirs = ['src/test/java', 'build/classes/test']
        }
    }
}

task compileLib(type: JavaCompile, group: 'build') {
    source = sourceSets.main.java.srcDirs
    classpath = configurations.compile
    destinationDir = sourceSets.main.java.srcDirs[1]
}

compileTestJava {
    dependsOn compileLib
    source = sourceSets.test.java.srcDirs
    classpath = configurations.testCompile + files(sourceSets.main.java.srcDirs[1])
}

task libJar(type: Jar) {
    dependsOn compileLib
    baseName = rootProject.name
    from(sourceSets.main.java.srcDirs[1])
}

task fatJar(type: Jar, group: 'build') {
    classifier = 'all'
    dependsOn compileLib
    manifest {
        attributes 'Implementation-Title': project.name,
                   'Implementation-Version': version,
                   'Main-Class': 'com.cisco.iot.swp.batch.re.app.BatchManagerSampleApp'
    }
    from sourceSets.main.java.srcDirs[1]
    from {configurations.applibs.collect { it.isDirectory() ? it : zipTree(it) } }
    from(configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }) {
        // remove all signature files
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}


//code coverage
//code coverage
jacoco {
    reportsDir = file("$buildDir/reports/jacoco/codecoverage")
}

jacocoTestReport {
    doFirst {
        classDirectories = fileTree(
            dir: "${buildDir}/classes/main/",
            exclude: ["**/*ErrorCodes*", "**/*Exception*", "**/*Mock*", "**/*StatusMgmt*", "**/*MgmtResource*", "**/*WebAppServerStarter*"]
        )
    }

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }

    afterEvaluate {
        classDirectories = fileTree(
            dir: "${buildDir}/classes/main/",
            exclude: ["**/*ErrorCodes*", "**/*Exception*", "**/*Mock*", "**/*StatusMgmt*",  "**/*MgmtResource*", "**/*WebAppServerStarter*" ]
        )
    }
}

clean {
   delete 'build' 
   delete 'bin'
}

artifacts {
    archives libJar, fatJar 
}

jar.enabled = false
