apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'jacoco'


group = 'com.cisco.iotsp'
version = '0.4.0.1-SNAPSHOT'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}
  
// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    mavenCentral()   
    maven {
        url "http://engci-maven-master.cisco.com/artifactory/IoT_Software_Platform-snapshot"
    }
}


configurations {
    applibs 
}


dependencies {
    compile files('../../libs/lib-jars/iot-edge-rule-engine-0.3.1.0-SNAPSHOT.jar')
    compile files('../../libs/lib-jars/iot-state-processing-dsl-0.8.4-SNAPSHOT.jar')
    compile files('../../libs/lib-jars/iot-mqtt-client-edge-1.0.0.1-SNAPSHOT.jar')
    compile files('../../libs/lib-jars/iotsp-device-sdk-common-0.3.7.1-SNAPSHOT.jar')
    
    compile group: 'org.ini4j', name: 'ini4j', version: '0.5.1'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3.4'
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.1.1'
    

    compile group: 'commons-cli', name: 'commons-cli', version: '1.3'

    applibs 'org.slf4j:slf4j-jdk14:1.7.21'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.hamcrest:hamcrest-all:1.3'

    testCompile 'ch.qos.logback:logback-classic:1.1.7'		
    testCompile 'ch.qos.logback:logback-core:1.1.7'
    testCompile 'org.powermock:powermock-mockito-release-full:1.6.4'
    testCompile 'com.github.tomakehurst:wiremock:2.2.2'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.powermock:powermock-module-javaagent:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.6.4'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/classes/main']
        }
    }

    logback {
        resources {
            srcDirs = ['src/main/resources']
        }
    }

    test {
        java {
            srcDirs = ['src/test/java', 'build/classes/test']
        }
    }
}

task fatJar(type: Jar, group: 'build') {
    classifier = 'all'
    manifest {
        attributes 'Implementation-Title': project.name,
                   'Implementation-Version': version,
                   'Main-Class': 'com.cisco.iot.swp.edge.app.RESampleApp'
    }
    from sourceSets.main.java.srcDirs[1]
    from {configurations.applibs.collect { it.isDirectory() ? it : zipTree(it) } }
    from(configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }) {
        // remove all signature files
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}


test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
    jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/test.exec")
            classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }

    jvmArgs '-noverify'
}



//code coverage
jacoco {
    reportsDir = file("$buildDir/reports/jacoco/codecoverage")
}

jacocoTestReport {
    doFirst {
        classDirectories = fileTree(
            dir: "${buildDir}/classes/main/",
            exclude: ["**/*ErrorCodes*", "**/*Exception*", "**/*Mock*", "**/*StatusMgmt*", "**/*MgmtResource*", "**/*WebAppServerStarter*"]
        )
    }

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }

    afterEvaluate {
        classDirectories = fileTree(
            dir: "${buildDir}/classes/main/",
            exclude: ["**/*ErrorCodes*", "**/*Exception*", "**/*Mock*", "**/*StatusMgmt*",  "**/*MgmtResource*", "**/*WebAppServerStarter*" ]
        )
    }
}

test.finalizedBy('jacocoTestReport')

clean {
   delete 'build' 
   delete 'bin'
}

artifacts {
    archives fatJar
}

jar.enabled = false
